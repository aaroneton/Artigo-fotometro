//Bibliotecas utilizadas

#include <Wire.h>
#include <LiquidCrystal_I2C.h>


// Define os pinos utilizados
#define uv A5
#define botaoup 2
#define botaodown 7
#define prnt 13
#define LDR A0
#define zero A1
#define endereco  0x27 // Endereços comuns: 0x27, 0x3F
#define colunas   16
#define linhas    2

byte pinrgb[3] = {6,10,9}; //array da pinagem do led RGB **************

// Cada linha representa uma cor específica para um comprimento de onda                   
byte lambda[207][3] = 
//r  g  b 
{{0,0,255}, //440nm
{0,11,255}, 
{0,19,255}, 
{0,27,255}, 
{0,34,255}, 
{0,40,255}, //445nm
{0,47,255}, 
{0,53,255}, 
{0,59,255}, 
{0,65,255}, 
{0,70,255}, //450nm
{0,76,255}, 
{0,81,255}, 
{0,87,255}, 
{0,92,255},
{0,97,255}, //455nm
{0,102,255}, 
{0,108,255}, 
{0,113,255}, 
{0,118,255}, 
{0,123,255}, //460nm
{0,127,255}, 
{0,132,255}, 
{0,137,255}, 
{0,142,255}, 
{0,146,255}, //465nm
{0,151,255}, 
{0,156,255},
{0,160,255},
{0,165,255},
{0,169,255}, //470nm
{0,174,255},
{0,178,255},
{0,183,255},
{0,187,255},
{0,192,255}, //475nm
{0,196,255},
{0,200,255},
{0,205,255},
{0,209,255},
{0,213,255}, //480nm
{0,218,255},
{0,222,255},
{0,226,255},
{0,230,255},
{0,234,255}, //485nm
{0,239,255},
{0,243,255},
{0,247,255},
{0,251,255},
{0,255,255}, //490nm
{0,255,245},
{0,255,234},
{0,255,224},
{0,255,213},
{0,255,203}, //495nm
{0,255,192},
{0,255,181},
{0,255,169},
{0,255,158},
{0,255,146}, //500nm
{0,255,135},
{0,255,123},
{0,255,110},
{0,255,97},
{0,255,84}, //505nm
{0,255,70},
{0,255,56},
{0,255,40},
{0,255,23},
{0,255,0}, //510nm
{9,255,0},
{15,255,0},
{21,255,0},
{26,255,0},
{31,255,0}, //515nm
{36,255,0},
{40,255,0},
{45,255,0},
{49,255,0},
{54,255,0}, //520nm
{58,255,0},
{62,255,0},
{66,255,0},
{70,255,0},
{74,255,0}, //525nm
{78,255,0},
{82,255,0},
{86,255,0},
{90,255,0},
{94,255,0}, //530nm
{97,255,0},
{101,255,0},
{105,255,0},
{108,255,0},
{112,255,0}, //535nm
{115,255,0},
{119,255,0},
{123,255,0},
{126,255,0},
{129,255,0}, //540nm
{133,255,0},
{136,255,0},
{140,255,0},
{143,255,0},
{146,255,0}, //545nm
{150,255,0},
{153,255,0},
{156,255,0},
{160,255,0},
{163,255,0}, //550nm
{166,255,0},
{169,255,0},
{173,255,0},
{176,255,0},
{179,255,0}, //555nm
{182,255,0},
{185,255,0},
{189,255,0},
{192,255,0},
{195,255,0}, //560nm
{198,255,0},
{201,255,0},
{204,255,0},
{207,255,0},
{210,255,0}, //565nm
{213,255,0},
{216,255,0},
{219,255,0},
{222,255,0},
{225,255,0}, //570nm
{228,255,0},
{231,255,0},
{234,255,0},
{237,255,0},
{240,255,0}, //575nm
{243,255,0},
{246,255,0},
{249,255,0},
{252,255,0},
{255,255,0}, //580nm
{255,252,0},
{255,249,0},
{255,246,0},
{255,242,0},
{255,239,0}, //585nm
{255,236,0}, 
{255,233,0},
{255,230,0},
{255,226,0},
{255,223,0}, //590nm
{255,220,0},
{255,217,0},
{255,213,0},
{255,210,0},
{255,207,0}, //595nm
{255,203,0},
{255,200,0},
{255,197,0},
{255,193,0},
{255,190,0}, //600nm
{255,187,0},
{255,183,0},
{255,180,0},
{255,174,0},
{255,173,0}, //605nm
{255,169,0},
{255,166,0},
{255,162,0},
{255,159,0},
{255,155,0}, //610nm
{255,152,0},
{255,148,0},
{255,145,0},
{255,141,0},
{255,137,0}, //615nm
{255,134,0},
{255,130,0},
{255,126,0},
{255,123,0},
{255,119,0}, //620nm
{255,115,0},
{255,111,0},
{255,107,0},
{255,103,0},
{255,99,0}, //625nm
{255,95,0},
{255,91,0},
{255,87,0},
{255,83,0},
{255,79,0}, //630nm
{255,75,0},
{255,70,0},
{255,66,0},
{255,62,0},
{255,57,0}, //635nm
{255,52,0},
{255,48,0},
{255,43,0},
{255,38,0},
{255,33,0}, //640nm
{255,27,0},
{255,22,0},
{255,16,0},
{255,9,0},
{255,0,0}}; //645 


boolean botaoAnteriorup = false;
boolean botaoAtualup = false;
boolean botaoAnteriordown = false;
boolean botaoAtualdown = false;
// Variáveis para cálculos de absorvância e transmitância
int cor = 0; 
int onda = 440; //Comprimento de onda inicial
float calibrador ;
float absorbanciaA ; //absorbancia sem o zero REVER NA CONSTRUÇÃO DO APARELHO
float absorbanciaB ; //absorbancia com o zero
float transmitancia ;
float LDRvalor ;
float zeroValor ;

LiquidCrystal_I2C lcd(endereco, colunas, linhas);

void setup() {
  // Configuração dos pinos dos LEDs RGB
  for (int nPRGB =0; nPRGB<=3; nPRGB++){ //array de saida dos pinos***************************
  
  pinMode(pinrgb[nPRGB], OUTPUT);
    
}
  
  // Configuração dos pinos de entrada/saída
  pinMode(prnt, INPUT); //Botão para exportação de dados, deve-se usar com a biblioteca keyboard.h
  pinMode(botaoup, INPUT);
  pinMode(botaodown, INPUT);
  pinMode(LDR, INPUT);
  pinMode(zero, INPUT);

  
  // Inicialização do display LCD
  lcd.init(); // INICIA A COMUNICAÇÃO COM O DISPLAY
  lcd.backlight(); // LIGA A ILUMINAÇÃO DO DISPLAY
  lcd.clear();
  
  lcd.setCursor(0, 0);
  lcd.print("Photo.GRIARC");
  delay(1000);
  lcd.clear();
}

void loop() {
  controlaLED(); // Função para controlar o LED RGB
  controlaLCD(); // Função para atualizar o display LCD
  detectorLDR(); // Função para realizar a leitura do LDR
}

void detectorLDR() {
   // Leitura do valor do LDR e do potenciômetro zero
  LDRvalor = (-1) * analogRead(LDR); //o valor do LDR é inversamente proporcional ao potenciometro zero
  zeroValor = analogRead(zero);
  
  // Cálculo da absorbância e transmitância
  absorbanciaA = (-1) * (log((zeroValor / 1023.0) - transmitancia));
  transmitancia = LDRvalor / 1023.0;
  calibrador = absorbanciaB - absorbanciaA;
  absorbanciaB = log(10);
  
  // Atualização do display LCD
  lcd.setCursor(0, 1);
  lcd.print("Absob: ");
  lcd.print(absorbanciaA);
}

void controlaLCD() {
   // Atualização do display LCD com o valor do comprimento de onda
  
  delay(700);
  lcd.setCursor(0, 0);
  lcd.print("nm: ");
  lcd.print(onda);
}

void controlaLED() { // Leitura dos botões para controlar o comprimento de onda
  botaoAtualup = digitalRead(botaoup);
  botaoAtualdown = digitalRead(botaodown);
  
  // Aumenta o comprimento de onda e índice de cor
  if (botaoAtualup && !botaoAnteriorup) {
    onda++ & cor++; 
    if (cor > 207) { //ALTERAR COM A QUANTIDADE DE LINHAS DO ARRAY
      cor = 0;
    
    if (onda > 645) {
      onda = 440;
    }    }
  }
  // Diminui o comprimento de onda e índice de cor
  if (botaoAtualdown && !botaoAnteriordown) {
    onda-- & cor--;
    if (cor < 0) {
      cor = 207; //ALTERAR COM A QUANTIDADE DE LINHAS DO ARRAY
    if (onda < 440) {
      onda = 645;
    }
    
    }
  }
  
  botaoAnteriordown = botaoAtualdown;
  botaoAnteriorup = botaoAtualup;
  
  // Atualiza a cor dos LEDs RGB de acordo com o índice de cor atual
  for (int nCOR = 0; nCOR <= 207; nCOR++){
    
    analogWrite(pinrgb[nCOR], lambda[cor][nCOR]);
    
  }
}
